"""
Pydantic schemas for AutoDevHub API request/response validation.

These schemas define the structure for API inputs and outputs,
separate from the SQLAlchemy database models.
"""

from datetime import datetime
from typing import Any, Dict, Optional

from pydantic import BaseModel, Field, ConfigDict


class UserStoryBase(BaseModel):
    """Base schema for UserStory with common fields."""
    
    feature_description: str = Field(
        ...,
        min_length=10,
        max_length=5000,
        description="Feature description provided by the user",
        examples=["As a user, I want to be able to login to my account so that I can access my personal dashboard"]
    )
    
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Optional metadata about the story generation process",
        examples=[{
            "ai_model": "gpt-4",
            "processing_time_ms": 1250,
            "confidence_score": 0.95,
            "user_agent": "Mozilla/5.0...",
            "ip_address": "192.168.1.1"
        }]
    )


class UserStoryCreate(UserStoryBase):
    """Schema for creating a new user story."""
    
    # Inherits feature_description and metadata from UserStoryBase
    # gherkin_output will be generated by AI, not provided by user
    pass


class UserStoryUpdate(BaseModel):
    """Schema for updating an existing user story."""
    
    feature_description: Optional[str] = Field(
        None,
        min_length=10,
        max_length=5000,
        description="Updated feature description"
    )
    
    metadata: Optional[Dict[str, Any]] = Field(
        None,
        description="Updated metadata"
    )


class UserStoryResponse(UserStoryBase):
    """Schema for user story API responses."""
    
    model_config = ConfigDict(from_attributes=True)
    
    id: int = Field(..., description="Unique identifier for the user story")
    
    gherkin_output: str = Field(
        ...,
        description="AI-generated Gherkin scenarios in BDD format",
        examples=["""Feature: User Authentication
  As a user
  I want to be able to login to my account
  So that I can access my personal dashboard

  Scenario: Successful login with valid credentials
    Given I am on the login page
    When I enter valid username and password
    And I click the login button
    Then I should be redirected to my dashboard
    And I should see a welcome message

  Scenario: Failed login with invalid credentials
    Given I am on the login page
    When I enter invalid username or password
    And I click the login button
    Then I should see an error message
    And I should remain on the login page"""]
    )
    
    created_at: datetime = Field(..., description="Timestamp when the story was created")
    updated_at: datetime = Field(..., description="Timestamp when the story was last updated")


class UserStoryList(BaseModel):
    """Schema for paginated list of user stories."""
    
    stories: list[UserStoryResponse] = Field(..., description="List of user stories")
    total: int = Field(..., description="Total number of stories in database")
    page: int = Field(..., description="Current page number (1-based)")
    per_page: int = Field(..., description="Number of stories per page")
    total_pages: int = Field(..., description="Total number of pages")
    has_next: bool = Field(..., description="Whether there are more pages")
    has_prev: bool = Field(..., description="Whether there are previous pages")


class SessionBase(BaseModel):
    """Base schema for Session with common fields."""
    
    user_id: Optional[str] = Field(
        None,
        max_length=255,
        description="User identifier for session tracking"
    )
    
    preferences: Optional[Dict[str, Any]] = Field(
        None,
        description="User preferences and settings",
        examples=[{
            "theme": "dark",
            "language": "en",
            "ai_model_preference": "gpt-4",
            "story_format": "detailed",
            "email_notifications": True
        }]
    )


class SessionCreate(SessionBase):
    """Schema for creating a new session."""
    pass


class SessionUpdate(BaseModel):
    """Schema for updating an existing session."""
    
    user_id: Optional[str] = Field(None, max_length=255)
    preferences: Optional[Dict[str, Any]] = Field(None)


class SessionResponse(SessionBase):
    """Schema for session API responses."""
    
    model_config = ConfigDict(from_attributes=True)
    
    id: str = Field(..., description="Unique session identifier (UUID)")
    created_at: datetime = Field(..., description="Session creation timestamp")


class SearchQuery(BaseModel):
    """Schema for search requests."""
    
    query: str = Field(
        ...,
        min_length=1,
        max_length=500,
        description="Search query string",
        examples=["login authentication", "user dashboard", "payment processing"]
    )
    
    limit: int = Field(
        10,
        ge=1,
        le=100,
        description="Maximum number of results to return"
    )
    
    offset: int = Field(
        0,
        ge=0,
        description="Number of results to skip for pagination"
    )


class SearchResults(BaseModel):
    """Schema for search results."""
    
    results: list[UserStoryResponse] = Field(..., description="Matching user stories")
    total_matches: int = Field(..., description="Total number of matching stories")
    query: str = Field(..., description="Original search query")
    limit: int = Field(..., description="Applied limit")
    offset: int = Field(..., description="Applied offset")


class DatabaseStats(BaseModel):
    """Schema for database statistics."""
    
    total_stories: int = Field(..., description="Total number of user stories")
    oldest_story: Optional[datetime] = Field(None, description="Timestamp of oldest story")
    newest_story: Optional[datetime] = Field(None, description="Timestamp of newest story")
    avg_feature_description_length: float = Field(..., description="Average length of feature descriptions")
    avg_gherkin_output_length: float = Field(..., description="Average length of Gherkin outputs")


class DatabaseInfo(BaseModel):
    """Schema for database information and health check."""
    
    database_file: str = Field(..., description="Database file path")
    file_size_bytes: int = Field(..., description="Database file size in bytes")
    file_size_mb: float = Field(..., description="Database file size in MB")
    sqlite_version: str = Field(..., description="SQLite version")
    journal_mode: str = Field(..., description="SQLite journal mode (should be WAL)")
    page_count: int = Field(..., description="Number of database pages")
    page_size: int = Field(..., description="Database page size in bytes")
    estimated_size_mb: float = Field(..., description="Estimated database size in MB")


class ErrorResponse(BaseModel):
    """Schema for API error responses."""
    
    error: str = Field(..., description="Error type or code")
    message: str = Field(..., description="Human-readable error message")
    details: Optional[Dict[str, Any]] = Field(None, description="Additional error details")
    timestamp: datetime = Field(default_factory=datetime.now, description="Error timestamp")


class HealthCheck(BaseModel):
    """Schema for health check responses."""
    
    status: str = Field(..., description="Service status", examples=["healthy", "unhealthy"])
    database: Dict[str, Any] = Field(..., description="Database health information")
    timestamp: datetime = Field(default_factory=datetime.now, description="Health check timestamp")
    version: str = Field(..., description="Application version")


# Additional utility schemas for API operations

class BulkUserStoryCreate(BaseModel):
    """Schema for creating multiple user stories at once."""
    
    stories: list[UserStoryCreate] = Field(
        ...,
        min_items=1,
        max_items=50,
        description="List of user stories to create"
    )


class BulkUserStoryResponse(BaseModel):
    """Schema for bulk user story creation response."""
    
    created: list[UserStoryResponse] = Field(..., description="Successfully created user stories")
    failed: list[Dict[str, Any]] = Field(..., description="Failed user story creations with errors")
    total_requested: int = Field(..., description="Total number of stories requested")
    total_created: int = Field(..., description="Total number of stories successfully created")
    total_failed: int = Field(..., description="Total number of failed creations")