name: Test and Lint

on:
  push:
    branches: [main, develop, feature/*, fix/*]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run ESLint
        working-directory: ./frontend
        run: npm run lint

      - name: Check build
        working-directory: ./frontend
        run: npm run build

      - name: Upload lint results
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-lint-results
          path: frontend/eslint-report.json
          retention-days: 7

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Black formatter check
        working-directory: ./backend
        run: black --check . --diff

      - name: Run isort import sorting check
        working-directory: ./backend
        run: isort --check-only . --diff

      - name: Run Flake8 linting
        working-directory: ./backend
        run: |
          # Stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Exit-zero treats all errors as warnings
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics

      - name: Run MyPy type checking
        working-directory: ./backend
        run: mypy . --ignore-missing-imports --strict-optional

      - name: Run pytest
        working-directory: ./backend
        run: |
          python -m pytest tests/ -v \
            --cov=. \
            --cov-report=xml \
            --cov-report=term-missing \
            --cov-report=html \
            --junit-xml=pytest-report.xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: false

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/pytest-report.xml
            backend/coverage.xml
            backend/htmlcov/
          retention-days: 30

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install bandit safety

      - name: Run Bandit security scan
        working-directory: ./backend
        continue-on-error: true
        run: |
          bandit -r . -f json -o bandit-report.json || true
          bandit -r . -f txt

      - name: Run Safety dependency scan
        working-directory: ./backend
        continue-on-error: true
        run: |
          safety check --json --output safety-report.json || true
          safety check

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: |
            backend/bandit-report.json
            backend/safety-report.json
          retention-days: 30

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [frontend-test, backend-test, security-scan]
    if: always()
    
    steps:
      - name: Check job results
        run: |
          if [[ "${{ needs.frontend-test.result }}" == "failure" || "${{ needs.backend-test.result }}" == "failure" ]]; then
            echo "Quality gate failed: Tests failed"
            exit 1
          elif [[ "${{ needs.frontend-test.result }}" == "cancelled" || "${{ needs.backend-test.result }}" == "cancelled" ]]; then
            echo "Quality gate cancelled: Tests were cancelled"
            exit 1
          else
            echo "Quality gate passed: All tests succeeded"
          fi