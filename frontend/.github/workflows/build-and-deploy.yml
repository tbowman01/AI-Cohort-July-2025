name: Build and Deploy

on:
  push:
    branches: [main]
    tags: ['v*']
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Build production bundle
        working-directory: ./frontend
        run: npm run build

      - name: Upload frontend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: frontend-dist
          path: frontend/dist/
          retention-days: 90

  build-backend:
    name: Build Backend
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build wheel

      - name: Build Python package
        working-directory: ./backend
        run: |
          python -m build --wheel --sdist

      - name: Upload backend build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: backend-dist
          path: backend/dist/
          retention-days: 90

  create-release-package:
    name: Create Release Package
    runs-on: ubuntu-latest
    needs: [build-frontend, build-backend]
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/v')
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download frontend artifacts
        uses: actions/download-artifact@v4
        with:
          name: frontend-dist
          path: ./release/frontend/

      - name: Download backend artifacts
        uses: actions/download-artifact@v4
        with:
          name: backend-dist
          path: ./release/backend/

      - name: Create deployment structure
        run: |
          mkdir -p release/config
          mkdir -p release/scripts
          
          # Create deployment metadata
          cat > release/deployment-info.json << EOF
          {
            "version": "${{ github.sha }}",
            "build_date": "$(date -u +%Y-%m-%dT%H:%M:%SZ)",
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref_name }}",
            "environment": "${{ github.event.inputs.environment || 'production' }}",
            "components": {
              "frontend": {
                "framework": "React/Vite",
                "build_tool": "Vite"
              },
              "backend": {
                "framework": "FastAPI",
                "python_version": "${{ env.PYTHON_VERSION }}"
              }
            }
          }
          EOF

          # Create simple deployment script
          cat > release/scripts/deploy.sh << 'EOF'
          #!/bin/bash
          set -e
          
          echo "Deploying AutoDevHub..."
          echo "Frontend files: $(find frontend/ -name '*.html' -o -name '*.js' -o -name '*.css' | wc -l) files"
          echo "Backend packages: $(find backend/ -name '*.whl' | wc -l) packages"
          echo "Deployment info:"
          cat deployment-info.json | jq .
          EOF
          
          chmod +x release/scripts/deploy.sh

      - name: Create release archive
        run: |
          cd release
          tar -czf ../autodevhub-release-${{ github.sha }}.tar.gz .
          cd ..
          
          # Create checksums
          sha256sum autodevhub-release-${{ github.sha }}.tar.gz > autodevhub-release-${{ github.sha }}.tar.gz.sha256

      - name: Upload release package
        uses: actions/upload-artifact@v4
        with:
          name: release-package
          path: |
            autodevhub-release-${{ github.sha }}.tar.gz
            autodevhub-release-${{ github.sha }}.tar.gz.sha256
          retention-days: 180

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [create-release-package]
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'staging'
    environment:
      name: staging
      url: https://staging.autodevhub.example.com
    
    steps:
      - name: Download release package
        uses: actions/download-artifact@v4
        with:
          name: release-package
          path: ./

      - name: Simulate staging deployment
        run: |
          echo "🚀 Deploying to staging environment..."
          echo "Package: $(ls *.tar.gz)"
          echo "Checksum verification:"
          sha256sum -c *.sha256
          
          # Extract and verify deployment package
          tar -tzf *.tar.gz | head -10
          
          echo "✅ Staging deployment completed successfully!"
          echo "🌐 Application available at: https://staging.autodevhub.example.com"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [create-release-package, deploy-staging]
    if: startsWith(github.ref, 'refs/tags/v') || github.event.inputs.environment == 'production'
    environment:
      name: production
      url: https://autodevhub.example.com
    
    steps:
      - name: Download release package
        uses: actions/download-artifact@v4
        with:
          name: release-package
          path: ./

      - name: Simulate production deployment
        run: |
          echo "🚀 Deploying to production environment..."
          echo "Package: $(ls *.tar.gz)"
          echo "Checksum verification:"
          sha256sum -c *.sha256
          
          # Extract and verify deployment package
          tar -tzf *.tar.gz | head -10
          
          echo "✅ Production deployment completed successfully!"
          echo "🌐 Application available at: https://autodevhub.example.com"

      - name: Post-deployment health check
        run: |
          echo "🔍 Running post-deployment health checks..."
          # Simulate health checks
          echo "✅ Frontend serving static files"
          echo "✅ Backend API responding"
          echo "✅ Database connectivity verified"
          echo "✅ All health checks passed!"