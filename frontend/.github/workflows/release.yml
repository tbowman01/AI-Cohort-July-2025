name: Release Management

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string
      release_type:
        description: 'Type of release'
        required: true
        default: 'minor'
        type: choice
        options:
        - major
        - minor
        - patch
        - hotfix
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
          else
            VERSION="${{ github.ref_name }}"
          fi
          
          # Ensure version starts with 'v'
          if [[ ! $VERSION =~ ^v[0-9]+\.[0-9]+\.[0-9]+ ]]; then
            echo "Invalid version format: $VERSION"
            exit 1
          fi
          
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"

      - name: Validate version doesn't exist
        run: |
          if git tag -l | grep -q "^${{ steps.version.outputs.version }}$"; then
            echo "Tag ${{ steps.version.outputs.version }} already exists!"
            exit 1
          fi

      - name: Generate changelog
        id: changelog
        run: |
          # Get the last tag
          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
          
          if [[ -z "$LAST_TAG" ]]; then
            echo "No previous tags found, generating changelog from initial commit"
            CHANGELOG=$(git log --pretty=format:"- %s (%h)" --reverse)
          else
            echo "Generating changelog since $LAST_TAG"
            CHANGELOG=$(git log ${LAST_TAG}..HEAD --pretty=format:"- %s (%h)")
          fi
          
          # Save changelog to output (handle multiline)
          {
            echo 'changelog<<EOF'
            echo "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

  build-release:
    name: Build Release Assets
    runs-on: ubuntu-latest
    needs: validate-release
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Install backend dependencies
        working-directory: ./backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install build wheel

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Build backend
        working-directory: ./backend
        run: python -m build

      - name: Create release assets
        run: |
          mkdir -p release-assets
          
          # Frontend build
          cd frontend && tar -czf ../release-assets/autodevhub-frontend-${{ needs.validate-release.outputs.version }}.tar.gz dist/
          cd ..
          
          # Backend build
          cd backend && tar -czf ../release-assets/autodevhub-backend-${{ needs.validate-release.outputs.version }}.tar.gz dist/
          cd ..
          
          # Full application bundle
          tar -czf release-assets/autodevhub-full-${{ needs.validate-release.outputs.version }}.tar.gz \
            frontend/dist/ \
            backend/dist/ \
            backend/requirements.txt \
            README.md \
            LICENSE
          
          # Generate checksums
          cd release-assets
          for file in *.tar.gz; do
            sha256sum "$file" > "$file.sha256"
          done
          cd ..

      - name: Upload release assets
        uses: actions/upload-artifact@v4
        with:
          name: release-assets
          path: release-assets/
          retention-days: 90

  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [validate-release, build-release]
    permissions:
      contents: write
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download release assets
        uses: actions/download-artifact@v4
        with:
          name: release-assets
          path: ./release-assets

      - name: Create release notes
        id: release_notes
        run: |
          cat > release-notes.md << 'EOF'
          ## AutoDevHub Release ${{ needs.validate-release.outputs.version }}
          
          ### 🚀 What's New
          ${{ needs.validate-release.outputs.changelog }}
          
          ### 📦 Release Assets
          
          - **autodevhub-full-${{ needs.validate-release.outputs.version }}.tar.gz** - Complete application bundle
          - **autodevhub-frontend-${{ needs.validate-release.outputs.version }}.tar.gz** - Frontend build only
          - **autodevhub-backend-${{ needs.validate-release.outputs.version }}.tar.gz** - Backend build only
          
          All assets include SHA256 checksums for verification.
          
          ### 🛠️ Installation
          
          1. Download the full application bundle
          2. Verify checksums: `sha256sum -c autodevhub-full-${{ needs.validate-release.outputs.version }}.tar.gz.sha256`
          3. Extract: `tar -xzf autodevhub-full-${{ needs.validate-release.outputs.version }}.tar.gz`
          4. Follow deployment instructions in README.md
          
          ### 📋 Requirements
          
          - **Frontend**: Node.js 18+
          - **Backend**: Python 3.11+
          - **Database**: SQLite (included)
          
          ### 🔗 Links
          
          - [Documentation](https://github.com/${{ github.repository }}/blob/main/README.md)
          - [Installation Guide](https://github.com/${{ github.repository }}/blob/main/DEVELOPMENT_SETUP.md)
          - [Issues](https://github.com/${{ github.repository }}/issues)
          
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/${{ github.event.before }}...${{ needs.validate-release.outputs.version }}
          EOF

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: AutoDevHub ${{ needs.validate-release.outputs.version }}
          body_path: release-notes.md
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          files: |
            release-assets/*.tar.gz
            release-assets/*.sha256
          token: ${{ secrets.GITHUB_TOKEN }}

  update-version:
    name: Update Version Files
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update package.json version
        working-directory: ./frontend
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix for package.json
          VERSION_NO_V="${VERSION#v}"
          npm version "$VERSION_NO_V" --no-git-tag-version

      - name: Update pyproject.toml version
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix for Python version
          VERSION_NO_V="${VERSION#v}"
          sed -i "s/version = \".*\"/version = \"$VERSION_NO_V\"/" pyproject.toml

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add frontend/package.json pyproject.toml
          git commit -m "chore: bump version to ${{ needs.validate-release.outputs.version }}" || exit 0
          git push

  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create next development version
        if: github.event.inputs.release_type != 'hotfix'
        run: |
          echo "🚀 Release ${{ needs.validate-release.outputs.version }} completed successfully!"
          echo "📝 Next steps:"
          echo "1. Update project documentation if needed"
          echo "2. Notify team of new release"
          echo "3. Monitor deployment metrics"
          echo "4. Begin work on next release cycle"

      - name: Post to Slack/Discord (placeholder)
        run: |
          echo "📢 Would notify team channels:"
          echo "🎉 AutoDevHub ${{ needs.validate-release.outputs.version }} has been released!"
          echo "🔗 https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}"