name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.11'

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    strategy:
      matrix:
        component: [frontend, backend]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js (Frontend)
        if: matrix.component == 'frontend'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python (Backend)
        if: matrix.component == 'backend'
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Frontend Dependencies
        if: matrix.component == 'frontend'
        working-directory: frontend
        run: npm ci

      - name: Install Backend Dependencies
        if: matrix.component == 'backend'
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint Frontend
        if: matrix.component == 'frontend'
        working-directory: frontend
        run: npm run lint

      - name: Test Frontend
        if: matrix.component == 'frontend'
        working-directory: frontend
        run: npm run test:run

      - name: Lint Backend
        if: matrix.component == 'backend'
        working-directory: backend
        run: |
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          black --check .
          isort --check-only .

      - name: Type Check Backend
        if: matrix.component == 'backend'
        working-directory: backend
        run: mypy . --ignore-missing-imports

      - name: Test Backend
        if: matrix.component == 'backend'
        working-directory: backend
        run: |
          python -m pytest tests/ -v --cov=. --cov-report=xml --cov-report=term-missing

      - name: Build Frontend
        if: matrix.component == 'frontend'
        working-directory: frontend
        run: npm run build

      - name: Upload Frontend Build Artifacts
        if: matrix.component == 'frontend'
        uses: actions/upload-artifact@v4
        with:
          name: frontend-build
          path: frontend/dist/
          retention-days: 30

      - name: Upload Backend Coverage
        if: matrix.component == 'backend'
        uses: actions/upload-artifact@v4
        with:
          name: backend-coverage
          path: backend/coverage.xml
          retention-days: 30

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
          cache-dependency-path: backend/requirements.txt

      - name: Install Frontend Dependencies
        working-directory: frontend
        run: npm ci

      - name: Install Backend Dependencies
        working-directory: backend
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Build Frontend Production
        working-directory: frontend
        run: npm run build

      - name: Package Backend
        working-directory: backend
        run: |
          python -m pip install build
          python -m build

      - name: Upload Production Build
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: |
            frontend/dist/
            backend/dist/
          retention-days: 30

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [test, build]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: ./build

      - name: Generate Version
        id: version
        run: |
          VERSION=$(date +%Y.%m.%d)-$(git rev-parse --short HEAD)
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Create Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.version.outputs.version }}
          release_name: Release v${{ steps.version.outputs.version }}
          body: |
            ## AutoDevHub Release v${{ steps.version.outputs.version }}
            
            ### Changes
            - Automated release from main branch
            - Frontend build included
            - Backend package included
            
            ### Components
            - Frontend: React/Vite application
            - Backend: FastAPI application
            
            Deployed from commit: ${{ github.sha }}
          draft: false
          prerelease: false