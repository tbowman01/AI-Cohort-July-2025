# Docker Compose for AutoDevHub - Full Stack Application
version: '3.8'

services:
  # PostgreSQL Database Service
  database:
    image: postgres:15-alpine
    container_name: autodevhub-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-autodevhub}
      POSTGRES_USER: ${POSTGRES_USER:-autodevhub_user}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-autodevhub_password}
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    ports:
      - "${POSTGRES_PORT:-5432}:5432"
    networks:
      - autodevhub-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER:-autodevhub_user} -d ${POSTGRES_DB:-autodevhub}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service (FastAPI)
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: autodevhub-backend
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-development}
      - DEBUG=${DEBUG:-true}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-autodevhub_user}:${POSTGRES_PASSWORD:-autodevhub_password}@database:5432/${POSTGRES_DB:-autodevhub}
      - CORS_ORIGINS=${CORS_ORIGINS:-http://localhost:3000,http://localhost:5173}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - AI_API_KEY=${AI_API_KEY}
      - AI_MODEL=${AI_MODEL:-gpt-3.5-turbo}
    volumes:
      - ./backend:/app:ro
      - backend_data:/app/data
      - backend_logs:/app/logs
    ports:
      - "${BACKEND_PORT:-8000}:8000"
    networks:
      - autodevhub-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    develop:
      watch:
        - action: sync
          path: ./backend
          target: /app
          ignore:
            - __pycache__/
            - "*.pyc"
            - ".pytest_cache/"

  # Frontend Service (React + Vite)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: autodevhub-frontend
    restart: unless-stopped
    environment:
      - NODE_ENV=${NODE_ENV:-development}
      - VITE_API_BASE_URL=${VITE_API_BASE_URL:-http://localhost:8000}
      - VITE_APP_NAME=${VITE_APP_NAME:-AutoDevHub}
      - VITE_APP_VERSION=${VITE_APP_VERSION:-1.0.0}
    volumes:
      - ./frontend:/app:ro
      - frontend_data:/app/dist
    ports:
      - "${FRONTEND_PORT:-3000}:3000"
    networks:
      - autodevhub-network
    depends_on:
      - backend
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s
    develop:
      watch:
        - action: sync
          path: ./frontend/src
          target: /app/src

  # Full Stack Service (Alternative deployment)
  fullstack:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: autodevhub-fullstack
    restart: unless-stopped
    environment:
      - ENVIRONMENT=${ENVIRONMENT:-production}
      - DATABASE_URL=postgresql+asyncpg://${POSTGRES_USER:-autodevhub_user}:${POSTGRES_PASSWORD:-autodevhub_password}@database:5432/${POSTGRES_DB:-autodevhub}
      - SECRET_KEY=${SECRET_KEY:-your-secret-key-change-in-production}
      - AI_API_KEY=${AI_API_KEY}
    volumes:
      - fullstack_data:/app/data
      - fullstack_logs:/app/logs
    ports:
      - "${FULLSTACK_PORT:-80}:80"
    networks:
      - autodevhub-network
    depends_on:
      database:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 15s
    profiles:
      - fullstack

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: autodevhub-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-redis_password}
    volumes:
      - redis_data:/data
    ports:
      - "${REDIS_PORT:-6379}:6379"
    networks:
      - autodevhub-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    profiles:
      - cache

  # Nginx Load Balancer (Optional)
  nginx:
    image: nginx:alpine
    container_name: autodevhub-nginx
    restart: unless-stopped
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - nginx_logs:/var/log/nginx
    ports:
      - "${NGINX_PORT:-443}:443"
      - "${NGINX_HTTP_PORT:-80}:80"
    networks:
      - autodevhub-network
    depends_on:
      - backend
      - frontend
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    profiles:
      - production

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  backend_data:
    driver: local
  backend_logs:
    driver: local
  frontend_data:
    driver: local
  fullstack_data:
    driver: local
  fullstack_logs:
    driver: local
  redis_data:
    driver: local
  nginx_logs:
    driver: local

# Custom network for service communication
networks:
  autodevhub-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16