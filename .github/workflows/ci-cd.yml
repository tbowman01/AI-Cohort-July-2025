name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '20'
  PYTHON_VERSION: '3.11'

jobs:
  test-frontend:
    name: Test Frontend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linter
      run: npm run lint
    
    - name: Run tests
      run: npm run test:ci
    
    - name: Build frontend
      run: npm run build

  test-backend:
    name: Test Backend
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: testpassword
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-asyncio pytest-cov
    
    - name: Run tests
      run: pytest --cov=. --cov-report=xml
      env:
        DATABASE_URL: postgresql://postgres:testpassword@localhost:5432/testdb
    
    - name: Upload coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./backend/coverage.xml

  build-and-release:
    name: Build and Release
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        cache: 'pip'
    
    - name: Build frontend
      run: |
        cd frontend
        npm ci
        npm run build
    
    - name: Package backend
      run: |
        cd backend
        pip install -r requirements.txt
        python -m compileall .
    
    - name: Create release assets
      run: |
        mkdir -p release-assets
        tar -czf release-assets/frontend-dist.tar.gz -C frontend/dist .
        tar -czf release-assets/backend-src.tar.gz backend/
        tar -czf release-assets/autodevhub-v1.0.0-alpha.tar.gz frontend/dist backend/ docker-compose.yml README.md
    
    - name: Upload artifacts
      uses: actions/upload-artifact@v3
      with:
        name: release-assets
        path: release-assets/
        retention-days: 30

  docker-build:
    name: Docker Build
    needs: [test-frontend, test-backend]
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build and test backend image
      run: |
        docker build -t autodevhub-backend:test ./backend
        docker run --rm autodevhub-backend:test python -c "import main; print('Backend container OK')"
    
    - name: Build and test frontend image
      run: |
        docker build -t autodevhub-frontend:test ./frontend
        docker run --rm autodevhub-frontend:test nginx -t
    
    - name: Build full-stack image
      run: |
        docker build -t autodevhub:latest .
        docker images autodevhub:latest